// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicShopExam;

#nullable disable

namespace MusicShopExam.Migrations
{
    [DbContext(typeof(MusicShopDbContext))]
    partial class MusicShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicShopExam.Entities.AvailablePlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("TracksCount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("AvailablePlates");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "user1",
                            Password = "1234",
                            TotalAmount = 132.0
                        },
                        new
                        {
                            Id = 2,
                            Login = "superUser",
                            Password = "qwerty1234",
                            TotalAmount = 572.0
                        });
                });

            modelBuilder.Entity("MusicShopExam.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hip-Hop"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Funk"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Disco"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dubstep"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Phonk"
                        });
                });

            modelBuilder.Entity("MusicShopExam.Entities.Plate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("TracksCount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Plates");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("AvailablePlateId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("PlateId")
                        .HasColumnType("int");

                    b.Property<string>("SaleDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailablePlateId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PlateId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("MusicShopExam.Entities.AvailablePlate", b =>
                {
                    b.HasOne("MusicShopExam.Entities.Genre", "Genre")
                        .WithMany("AvailablePlates")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicShopExam.Entities.Publisher", "Publisher")
                        .WithMany("AvailablePlates")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Plate", b =>
                {
                    b.HasOne("MusicShopExam.Entities.Genre", "Genre")
                        .WithMany("Plates")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicShopExam.Entities.Publisher", "Publisher")
                        .WithMany("Plates")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Sale", b =>
                {
                    b.HasOne("MusicShopExam.Entities.AvailablePlate", null)
                        .WithMany("Sales")
                        .HasForeignKey("AvailablePlateId");

                    b.HasOne("MusicShopExam.Entities.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicShopExam.Entities.Plate", "Plate")
                        .WithMany("Sales")
                        .HasForeignKey("PlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("MusicShopExam.Entities.AvailablePlate", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Client", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Genre", b =>
                {
                    b.Navigation("AvailablePlates");

                    b.Navigation("Plates");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Plate", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MusicShopExam.Entities.Publisher", b =>
                {
                    b.Navigation("AvailablePlates");

                    b.Navigation("Plates");
                });
#pragma warning restore 612, 618
        }
    }
}
